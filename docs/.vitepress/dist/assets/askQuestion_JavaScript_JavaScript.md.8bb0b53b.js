import{_ as s,o as a,c as l,S as n}from"./chunks/framework.1b3dd200.js";const A=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"askQuestion/JavaScript/JavaScript.md","filePath":"askQuestion/JavaScript/JavaScript.md"}'),o={name:"askQuestion/JavaScript/JavaScript.md"},p=n(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;es6&quot;">​</a></h2><h3 id="如何理解-promise-及使用场景" tabindex="-1">如何理解 Promise 及使用场景？ <a class="header-anchor" href="#如何理解-promise-及使用场景" aria-label="Permalink to &quot;如何理解 Promise 及使用场景？&quot;">​</a></h3><p>一、介绍： Promise 是用于处理异步操作的一种解决方案。优点：链式操作减低编码难度；代码可读性增强。</p><p>Promise 的三种状态：pending(等待中)；fulfilled(已成功)；rejected(已失败)</p><p>特点：</p><ul><li>对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态；</li><li>一旦状态改变(pending 变为 fulfilled 和 pending 变为 rejected)，就不会再改变，任何时候都可以得到这个结果。</li></ul><p>二、用法： Promise 对象是一个构造函数，用来生成 Promise 实例。 Promise 构造函数接受一个函数作为参数，该函数两个参数分别为 resolve 和 rejecte</p><ul><li>resolve 函数作用：将 Promise 对象的状态从“未完成”变为“成功”。</li><li>reject 函数作用：将 Promise 对象的状态从“未完成”变为“失败”。</li></ul><p>三、 实例方法：then()；catch()；finally()</p><ul><li>then()： then 方法接收两个参数，第一个参数是 Promise 成功的回调函数，第二个参数是 Promise 失败的回调函数。then 方法返回一个新的 Promise 实例，也就是 Promise 能链式书写的原因。</li><li>catch()：是.then(null,rejection) 或 .then(undefined, rejection)的别名，用于指定发生错误时的回调函数。 Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。 一般使用 catch 方法代替 then()第二个参数</li><li>finally()：用于指定不管 Promise 对象最后状态如何，都会执行的操作。</li></ul><p>四、Promise 相关方法：</p><ul><li>all()：Promise.all()方法适用于多个请求合并在一起，，汇总所有请求的结果。注意：所有的 promise 都成功时才返回结果。其参数传递一个数组，数组中记录所有的 promise 一步处理，然后进入.then，如果有一个异步执行了 reject，就会终止进入 catch，不会再进入.then。</li><li>race()：Promise.race()方法只返回最快被处理的那一个 promise 的结果。</li><li>any()：Promise.any()方法只会返回第一个成功的结果，如果第一个是失败的，就会拿不到。</li><li>allSettled()：Promise.allSettled()方法 会返回所有 promise 的最终状态（无论成功还是失败），并提供每个 promise 的结果或错误信息。</li></ul><h3 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h3><p><code>Generator</code>是一种可以在执行过程中暂停和恢复的函数。</p><ul><li><code>yield</code>可以暂停函数的执行。<code>next()</code>方法恢复执行。</li><li><code>Generator</code>函数状态可以是<code>suspended（暂停中）</code>或<code>completed（完成）</code>。</li></ul><h3 id="async-和-await" tabindex="-1">async 和 await <a class="header-anchor" href="#async-和-await" aria-label="Permalink to &quot;async 和 await&quot;">​</a></h3><p><code>async/await</code>是基于 promise 的语法糖，可以简化异步操作的写法，使得处理异步操作更加直观和同步化。</p><ul><li><code>async</code>：标记一个函数为一步函数，该函数会返回一个<code>Promise</code></li><li><code>await</code>：用来暂停异步函数的执行，直到<code>Promise</code>被解决，然后返回结果。(只能在<code>async</code>函数内部使用.)</li></ul><p>(async 和 await 的使用细节)[<a href="https://mp.weixin.qq.com/s/MiyHSzjCprtq99l8yKoPrw" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/MiyHSzjCprtq99l8yKoPrw</a>]</p><h2 id="javascript-部分" tabindex="-1">JavaScript 部分 <a class="header-anchor" href="#javascript-部分" aria-label="Permalink to &quot;JavaScript 部分&quot;">​</a></h2><h3 id="javascript-有哪些数据类型及区别" tabindex="-1">JavaScript 有哪些数据类型及区别？ <a class="header-anchor" href="#javascript-有哪些数据类型及区别" aria-label="Permalink to &quot;JavaScript 有哪些数据类型及区别？&quot;">​</a></h3><p>八种数据类型：Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p><p>栈(先进后出)-基本数据类型：Undefined、Null、Boolean、Number、String；</p><p>堆(先进先出)-引用数据类型：Object、数组和函数。</p><ul><li>Symbol 代表创建后独一无二且不可变的数据类型，为解决可能出现的全局变量冲突的问题。</li><li>BigInt 是一种数字类型的数据，可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><h3 id="数据类型检测方式" tabindex="-1">数据类型检测方式 <a class="header-anchor" href="#数据类型检测方式" aria-label="Permalink to &quot;数据类型检测方式&quot;">​</a></h3><ul><li><p>typeof —— 数组、对象、null 都会被判断为 object，其他基本数据类型都可以判断正确。</p></li><li><p>instanceof —— 正确判断对象的类型，即正确判断引用数据类型，不能判断基本数据类型。内部运行机制是判断在其原型链中能否找到该类型的原型。</p></li><li><p>constructor —— 作用一：判断数据的类型；作用二：对象实例通过 constrcutor 对象访问它的构造函数。</p></li><li><p>Object.prototype.toString.call()使用 Object 对象的原型方法 toString 来判断数据类型。 【说明：Array、function 等类型作为 Object 的实例，都重写了 toString 方法。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法(function 类型返回内容为函数体的字符串， Array 类型返回元素组成的字符串...)而不会去调用 Object 上原型 toString 方法(返回对象的具体类型)，所以采用 obj.toString()不能得到其对象类型，只能将 obj 转换为字符串类型； 因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。】</p><p>2.1 判断一个对象是空对象</p><ul><li>JSON.stringify()</li><li>Object.keys()来判断</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj) </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">空对象</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">空对象</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><h3 id="简述-javascript-中的类型转换机制" tabindex="-1">简述 JavaScript 中的类型转换机制 <a class="header-anchor" href="#简述-javascript-中的类型转换机制" aria-label="Permalink to &quot;简述 JavaScript 中的类型转换机制&quot;">​</a></h3><p>一、概述：常见类型转换有：强制转换（显式转换）、隐式转换。</p><ol><li>强制转换（显式转换）常见方法：</li></ol><ul><li>Number();</li><li>parseLint();</li><li>String();</li><li>Boolean().</li></ul><ol start="2"><li>隐式转换</li></ol><ul><li>发生隐式转换的情况：比较运算符(==、!=、===、&gt;、&lt;、if、while 需要布尔值地方)、算术运算符(+、-、*、/、%)，且运算符两边的数据类型不一致。</li></ul><p>1）自动转换为布尔值：undefined、null、false、+0、-0、NaN 会被转化为 false，其他非零数据都被转化为 true。 2）自动转换为字符串：在字符串和非字符串数据进行 相加运算 的时候会自动转换为字符串。 3）自动转换为数值：除了加号 可能转换为字符串，字符串和数字 进行其他的数学运算时，JavaScript 会尝试转为数字进行运算，且结果也是数字型。 4）比较操作符：① <code>==</code> 会先类型转换，再进行比较，null == undefined 是 true。② <code>===</code> 是更严格的比较，不仅比较数值是否相等，还会比较类型。null === undefined 是 false。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 字符/串 遇到‘+’会隐式转换，结果是拼接后的字符串</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5[object Object]&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;51&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5true&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5false&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5function (){}&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5undefined&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;5null&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//==隐式转换为数字，进行计算====</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** null转为数值时，值为0 。undefined转为数值时，值为NaN **/</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -1</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre></div><h3 id="数据类型检测方法" tabindex="-1">数据类型检测方法 <a class="header-anchor" href="#数据类型检测方法" aria-label="Permalink to &quot;数据类型检测方法&quot;">​</a></h3><ol><li>typeof</li></ol><ul><li>可以准确检测基本数据类型（string number boolean undefined symbol bigint），</li><li>但对于 null，typeof 返回的是 object。引用数据类型（object array function date RegExp）也会返回 object。</li></ul><ol start="2"><li>instanceof</li></ol><ul><li>用于检查一个对象是否是某个构造函数的实例，适用于引用类型的检测。</li></ul><ol start="3"><li>constructor</li></ol><ul><li>被检查对象的 constructor 属性可以获取到其构造函数，可以检测由字面量方式创建的对象类型</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Array)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="4"><li><p>Array.isArray：专门用于检测是否是数组</p></li><li><p>Object.prototype.toString.call()：是更加全面的数据类型检测方法。toString()方法是 Object 的原型方法，是一个内部属性，格式[object, Xxx]，Xxx 就是返回的数据类型。</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Boolean]&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Null]&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Undefined]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">([])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//[object Array]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object RegExp]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Error]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(document)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object HTMLDocument]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object global] window 是全局对象 global 的引用</span></span></code></pre></div><ol start="6"><li>Buffer.isBuffer()：专门用于检测 Buffer 类型</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isBuffer</span><span style="color:#A6ACCD;">(buffer))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div><ol start="7"><li>Lodash 库提供一系列的类型检测方法</li></ol><h3 id="null-和-undefined-区别" tabindex="-1">null 和 undefined 区别 <a class="header-anchor" href="#null-和-undefined-区别" aria-label="Permalink to &quot;null 和 undefined 区别&quot;">​</a></h3><p>两者都是基本数据类型。</p><ul><li>undefined 代表未定义，变量声明但未定义会返回 undefined，</li><li>null 是对象。用于赋值给一些可能会返回对象的变量，作为初始化。typeof 进行检测类型，返回是 Object</li></ul><h3 id="object-is-与比较操作符-、-的区别" tabindex="-1">Object.is()与比较操作符“===”、&quot;==&quot;的区别 <a class="header-anchor" href="#object-is-与比较操作符-、-的区别" aria-label="Permalink to &quot;Object.is()与比较操作符“===”、&quot;==&quot;的区别&quot;">​</a></h3><ul><li>使用双等号(==)进行相等判断，如果两边类型不一致，会进行强制类型转化后再进行比较。不够严谨，尽量避免使用双等号。</li><li>使用三等号(===)进行相等判断，是比较值和类型都相等。</li><li>使用 Object.is()进行严格的相等判断，处理一些特殊情况：-0 和 +0 不相等，两个 NaN 是相等的。</li></ul><h3 id="深拷贝和浅拷贝方法" tabindex="-1">深拷贝和浅拷贝方法 <a class="header-anchor" href="#深拷贝和浅拷贝方法" aria-label="Permalink to &quot;深拷贝和浅拷贝方法&quot;">​</a></h3><ul><li>浅拷贝：只复制第一层属性，如果属性是引用类型，那么复制的是属性的引用地址，如果修改其中一个对象，另一个对象也会发生改变。</li><li>深拷贝：地柜复制对象的所有层级，新的对象与原始对象完全独立，修改其中一个对象，不会影响到另一个对象。</li></ul><p>浅拷贝方法：</p><ol><li>Object.assign()</li><li>使用扩展运算符(...)</li><li>slice()或 Array.from()复制数组</li></ol><p>深拷贝方法：</p><ol><li>JSON.parse(JSON.stringify(obj))，适用对象和数组，但不能处理函数、undefined、Date、Map、Set 等特殊类型</li><li>使用递归方法手写实现深拷贝</li><li>使用第三方库，如 Lodash 的 <code>_.cloneDeep()</code>方法</li></ol><h3 id="数组常用方法" tabindex="-1">数组常用方法 <a class="header-anchor" href="#数组常用方法" aria-label="Permalink to &quot;数组常用方法&quot;">​</a></h3><p>一、增：</p><ul><li>push()，数组尾部添加新元素</li><li>unshift()，数组头部压入新元素</li><li>splice(开始位置，要删除的元素数量，插入元素)</li><li>concat()，不会都原数组产生影响</li></ul><p>二、删：</p><ul><li>pop()，删除数组最后一个元素</li><li>shift()，删除数组第一个元素</li><li>splice(开始位置，删除元素数量)，会改变原数组，返回包含删除元素的数组。</li><li>slice(),不会改变原数组</li></ul><p>三、查：</p><ul><li>indexOf()，返回查找元素在数组中的下标索引，找不到则返回-1</li><li>includes()，返回布尔值，判断数组中是否包含某个元素</li><li>find()，返回第一个找到的元素，找不到则返回 undefined</li></ul><p>四、排序</p><ul><li>reverse()，反转数组</li><li>sort(),对数组元素进行排序</li></ul><p>五、</p><ul><li>join(),将数组元素按照制定字符分隔，返回字符串</li></ul><p>六、迭代方法：</p><ul><li>some(),对数组的每一项进行判断，至少有一个满足条件就返回 true，否则返回 false</li><li>every(),对数组的每一项进行判断，所有满足条件才返回 true，否则返回 false</li><li>forEach(),对数组的每一项进行遍历，没有返回值</li><li>filter(),对数组的每一项进行判断，返回满足条件的元素组成的新数组</li><li>map(),对数组的每一项进行遍历，返回一个新数组</li></ul><h3 id="字符串常用方法" tabindex="-1">字符串常用方法 <a class="header-anchor" href="#字符串常用方法" aria-label="Permalink to &quot;字符串常用方法&quot;">​</a></h3><ul><li>concat(),将一个或多个字符串拼接成一个新字符串</li><li>slice()、substr()、substring()三个方法都可以实现字符串的截取，不会改变原字符串内容</li><li>trim()、trimLeft()、trimRight()，去除字符串前、后或前后所有的空格，返回新的字符串</li><li>repeat(一个整数参数)，表示将字符串复制多少次，返回拼接后的结果。</li><li>toLowerCase()、toUpperCase()，将字符串转换为小写、大写，返回新的字符串</li><li>chatAt(一个整数参数)，返回字符串中索引指定位置的字符，返回字符串。</li><li>indexOf(),从字符串头部开始查找，返回查找 字符串 的下标索引值</li><li>startWith()、includes()，从字符串中搜索传入字符串，返回布尔值</li></ul><ol start="2"><li>模板匹配方法</li></ol><ul><li>match()，接收一个参数，可以是一个正则表达式字符串，也可以是一个 RegExp 对象，返回数组</li><li>search(),接收一个参数，可以是一个正则表达式字符串，也可以是一个 RegExp 对象，返回匹配到的字符串的索引值，否则返回 -1</li><li>replace()，接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cat, bat, sat, fat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.at</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> matches </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(pattern)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(matches[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;cat&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// --------------------</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cat, bat, sat, fat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">at</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(pos)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// --------------------</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cat, bat, sat, fat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">at</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ond</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;cond, bat, sat, fat&quot;</span></span></code></pre></div><h3 id="instanceof-操作符实现原理及实现" tabindex="-1">instanceof 操作符实现原理及实现 <a class="header-anchor" href="#instanceof-操作符实现原理及实现" aria-label="Permalink to &quot;instanceof 操作符实现原理及实现&quot;">​</a></h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p><h3 id="如何获取安全的-undefined-值" tabindex="-1">如何获取安全的 undefined 值 <a class="header-anchor" href="#如何获取安全的-undefined-值" aria-label="Permalink to &quot;如何获取安全的 undefined 值&quot;">​</a></h3><p>表达式 void _ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p><h3 id="什么是-javascript-中的包装类型" tabindex="-1">什么是 JavaScript 中的包装类型 <a class="header-anchor" href="#什么是-javascript-中的包装类型" aria-label="Permalink to &quot;什么是 JavaScript 中的包装类型&quot;">​</a></h3><p>JavaScript 包装类型是将基本数据类型(字符串、数字、布尔值)转换为对应的对象类型的过程。JavaScript 中的基本数据类型是原始值，它们是不可变的，不能拥有方法或属性。为了能够对原始值进行方法调用和属性访问，JavaScript 引擎会在必要时自动将其转换为对应的包装对象，然后调用对象的方法或属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (1) 在访问&#39;abc.length&#39;时，JavaScript将&#39;abc&#39;在后台转换成String(&#39;abc&#39;)，然后再访问其lengt属性。</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;ABC&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (2) JavaScrip也可以使用Object函数显式地将基本类型转换为包装类型：</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//String(&quot;abc&quot;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (3) 可以使用valueOf()方法将包装类型转成基本类型：</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;abc&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (4) 虽然包裹的基本类型是 false，但是 false 被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">a) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">打印了吗</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// never runs</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="为什么有-bigint-提案" tabindex="-1">为什么有 BigInt 提案 <a class="header-anchor" href="#为什么有-bigint-提案" aria-label="Permalink to &quot;为什么有 BigInt 提案&quot;">​</a></h3><p>JavaScript 中 Number.MAX_SAEF_INTEGER 表示最大安全数字，计算结果是 900719925470991，即在这个数范围内不会出现精度丢失(小数除外)。但是一旦超过这个范围，js 就会出现计算不准确的情况，这在大数计算的时候不得不依靠一些第三方库进行解决，因此官方提出 BigInt 来解决该问题。</p><ul><li>避免精度丢失。</li><li>BigInt 允许表示大整数，也可以对整数进行算术运算的方法(加减乘除和幂运算)，并确保运算的精度和正确性。</li></ul><h3 id="for-in-和-for-of-的区别" tabindex="-1">for...in 和 for...of 的区别 <a class="header-anchor" href="#for-in-和-for-of-的区别" aria-label="Permalink to &quot;for...in 和 for...of 的区别&quot;">​</a></h3><p>for...of 允许遍历含有 iterator 接口的数据结构(数组、对象等)并且返回各项的值。</p><ul><li>for...of 遍历获取对象的键值，for...in 获取的是对象的键名。for...in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for...of 之遍历当前对象不会遍历原型链。</li><li>总之：for...in 循环是为了遍历对象而生，不适用遍历数组；for...of 循环可以用来遍历数组、类型对象，字符串、Set、Map 以及 Generator 对象。</li></ul><h2 id="收集的问题" tabindex="-1">收集的问题 <a class="header-anchor" href="#收集的问题" aria-label="Permalink to &quot;收集的问题&quot;">​</a></h2><h3 id="浏览器对队头阻塞有什么优化" tabindex="-1">浏览器对队头阻塞有什么优化？ <a class="header-anchor" href="#浏览器对队头阻塞有什么优化" aria-label="Permalink to &quot;浏览器对队头阻塞有什么优化？&quot;">​</a></h3><h3 id="javascript-如何做内存管理" tabindex="-1">JavaScript 如何做内存管理？ <a class="header-anchor" href="#javascript-如何做内存管理" aria-label="Permalink to &quot;JavaScript 如何做内存管理？&quot;">​</a></h3><h3 id="eslint-代码检查的过程是啥" tabindex="-1">Eslint 代码检查的过程是啥？ <a class="header-anchor" href="#eslint-代码检查的过程是啥" aria-label="Permalink to &quot;Eslint 代码检查的过程是啥？&quot;">​</a></h3><h3 id="在做-eslint-和-commitlint-的时候-可以使用-no-verify-跳过-这种情况下该如何强制卡点" tabindex="-1">在做 eslint 和 commitlint 的时候， 可以使用 --no-verify 跳过， 这种情况下该如何强制卡点 <a class="header-anchor" href="#在做-eslint-和-commitlint-的时候-可以使用-no-verify-跳过-这种情况下该如何强制卡点" aria-label="Permalink to &quot;在做 eslint 和 commitlint 的时候， 可以使用 --no-verify 跳过， 这种情况下该如何强制卡点&quot;">​</a></h3><h3 id="node-更适合处理处理-i-o-密集型任务还是-cpu-密集型任务-为什么" tabindex="-1">Node 更适合处理处理 I/O 密集型任务还是 CPU 密集型任务？为什么 <a class="header-anchor" href="#node-更适合处理处理-i-o-密集型任务还是-cpu-密集型任务-为什么" aria-label="Permalink to &quot;Node 更适合处理处理 I/O 密集型任务还是 CPU 密集型任务？为什么&quot;">​</a></h3><p>Node 更适合处理 I/O 密集型任务。 因为 Node 的 I/O 密集型任务可以异步调用，利用事件循环的处理能力，资源占用极少，并且事件循环的处理能力，资源占用极少，并且事件循环能力避开了多线程的调用，在调用方面是单线程，内部处理其实是多线程的。另外，由于 JavaScript 是单线程的原因，Node 不适合处理 CPU 密集型的任务，CPU 密集型的任务会导致 CPU 时间片不能释放，使得后续 I/O 无法发起，从而造成阻塞。但是可以利用多进程的特点完成对一些 CPU 密集型任务的处理，不过由于 JavaScript 并不支持多线程，所以在啊这方面的处理能力会弱于其他多线程语言(例如 Java、Go)。</p>`,98),t=[p];function e(c,r,i,y,D,F){return a(),l("div",null,t)}const u=s(o,[["render",e]]);export{A as __pageData,u as default};
