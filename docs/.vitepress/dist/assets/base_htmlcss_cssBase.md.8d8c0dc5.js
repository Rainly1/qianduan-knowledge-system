import{_ as i,o as e,c as o,a as t,S as l}from"./chunks/framework.1b3dd200.js";const g=JSON.parse('{"title":"CSS 知识点","description":"","frontmatter":{},"headers":[],"relativePath":"base/htmlcss/cssBase.md","filePath":"base/htmlcss/cssBase.md"}'),a={name:"base/htmlcss/cssBase.md"},d=l('<h1 id="css-知识点" tabindex="-1">CSS 知识点 <a class="header-anchor" href="#css-知识点" aria-label="Permalink to &quot;CSS 知识点&quot;">​</a></h1><div class="tip-box"><h3 style="margin:0px 0 10px;">什么是盒模型？</h3><div> 当对一个文档进行布局时，浏览器的渲染引擎会根据标准之一的css基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子；css决定这些盒子的大小、位置以及属性（如颜色、背景、边框尺寸等） </div><div>每个盒子（即盒模型）从外到内由四个部分组成</div><ul><li><strong>margin</strong> 外边距 (不计入盒子的实际大小)</li><li><strong>border</strong> 边距</li><li><strong>padding</strong> 内边距</li><li><strong>content</strong> 内容</li></ul></div>',2),c=l('<h2 id="什么是-bfc" tabindex="-1">什么是 BFC <a class="header-anchor" href="#什么是-bfc" aria-label="Permalink to &quot;什么是 BFC&quot;">​</a></h2><div class="tip-box"><h3 style="margin:0px 0 10px;">格式化上下文（Formatting Context）</h3><div> 格式化上下文即FC，是Web页面中一种特殊的渲染区域，并有一套渲染规则，它决定了其元素如何排列、定位、以及和其他元素的关系和相互作用 </div><div>在css中，每个元素都属于一个特定的格式化上下文。有一些元素自带格式化上下文，例如根元素(html)、块级元素、浮动元素、绝对定位元素等。其他元素则可以通过一些css属性来创建自己的格式化上下文，例如display:inline-block、overflow:hidden、floa:left等。</div></div><p>BFC 即块级格式化上下文(Block Formatting Context)，是 Web 页面中一种渲染模式，用于确定块级元素如何排列、定位和与其他元素交互，其相当于一个独立的容器，里面的元素和外部的元素相互不影响。</p><h3 id="bfc-的布局规则" tabindex="-1">BFC 的布局规则 <a class="header-anchor" href="#bfc-的布局规则" aria-label="Permalink to &quot;BFC 的布局规则&quot;">​</a></h3><ul><li>BFC 内部的 Box 会在垂直方向，一个接一个的防止（不会出现元素重叠）</li><li>BFC 中两个 Box 垂直方向的距离由 margin 决定</li><li>同一个 BFC 中两个相邻 Box 的垂直边距 margin 会发生重叠，在不同的 BFC 中则不会发生重叠</li><li>BFC 中每个子元素的左外边距(margin-left)与容器父元素的左边界相接触(border-left)</li><li>BFC 中元素的布局不受外界的影响，也不会影响到外界的元素 <ul><li>形成了 NFC 的区域不会与浮动元素区域重叠</li><li>计算 NFC 的高度时，浮动元素也会参与计算</li></ul></li></ul><h3 id="bfc-如何创建" tabindex="-1">BFC 如何创建 <a class="header-anchor" href="#bfc-如何创建" aria-label="Permalink to &quot;BFC 如何创建&quot;">​</a></h3><ul><li>根元素（&lt;<code>html</code>&gt;）</li><li>浮动元素：float 不为 none</li><li>绝对定位元素：position 为 absolute 或 fixed</li><li>display 值为如下属性： <ul><li>inline-block 行内块元素</li><li>flow-root 块级元素盒</li><li>table 该行为类似于<code>&lt;table&gt;</code>元素</li><li>table-cell 该行为类似于<code>&lt;td&gt;</code>元素</li><li>table-caption 该行为类似于<code>&lt;caption&gt;</code></li><li>table-row 该行为类似于<code>&lt;tr&gt;</code>元素</li><li>table-row-group 该行为类似于<code>&lt;tbody&gt;</code>元素</li><li>table-header-group 该行为类似于<code>&lt;thead&gt;</code>元素</li><li>table-footer-group 该行为类似于<code>&lt;tfoot&gt;</code>元素</li><li>inline-table 内联表格</li></ul></li><li>display 值为<code>flex</code> <code>inline-flex</code> <code>grid</code> <code>inline-grid</code>的直接子元素，且它们本身都不是<code>flex</code>、<code>grid</code>、<code>table</code>容器</li><li>contain 值为<code>layout</code>、<code>content</code>或<code>paint</code>的元素</li><li>overflow 不为<code>visible</code>和<code>clip</code>的块元素</li><li>多列容器：<code>column-count</code>或<code>column-width</code>值不为 auto</li><li>column-span 值为 all</li></ul><h3 id="bfc-的应用场景" tabindex="-1">BFC 的应用场景 <a class="header-anchor" href="#bfc-的应用场景" aria-label="Permalink to &quot;BFC 的应用场景&quot;">​</a></h3><ul><li>浮动元素高度塌陷</li><li>阻止元素被浮动元素覆盖</li><li>防止 margin 重叠（塌陷）</li><li>自适应布局</li></ul><h3 id="常见的格式化上下文总结" tabindex="-1">常见的格式化上下文总结 <a class="header-anchor" href="#常见的格式化上下文总结" aria-label="Permalink to &quot;常见的格式化上下文总结&quot;">​</a></h3><ul><li>BFC：块级格式上下文</li><li>IFC：行内格式化上下文在 IFC 中元素会沿着基线对齐并按从左到右的顺序排列</li><li>TCFC：表格单元格格式化上下文在 ICFC 中表格的列宽会根据单元格的内容自动调整，而不会出现列宽不一致的情况</li><li>FFC：弹性盒子格式化上下文在 FFC 中弹性盒子元素可以按照自己的尺寸和顺序进行排列</li><li>GFC：网格格式化上下文在 GFC 中网格元素可以按照网格的行和列进行排列 FFC 和 GFC 除布局之外规则与 BFC 块格式上下文类似，其容器中不存在浮动子元素，但排除外部浮动和阻止外边距重叠仍然有效</li></ul>',11);function n(r,s,b,h,C,u){return e(),o("div",null,[d,t(" 盒模型分为W3C标准盒模型和IE盒模型，其区别只有一个：计算盒子实际大小（即总宽度/总高度）的方式不一样。 - W3C标准盒模型（默认） - 盒子实际宽 = width + padding + border - 其中width只包含content（即内容区域的宽度） - 通过box-sizing:content-box；来设置为W3C标准盒模型 - IE盒模型 - 盒子实际宽 = width - 其中width = content + border + padding - 通过box-sizing: border-box；来设置为IE盒模型 "),c])}const f=i(a,[["render",n]]);export{g as __pageData,f as default};
